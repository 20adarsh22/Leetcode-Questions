// Name - Nehal Ughade
// Difficulty - Medium
// Problem number - 122
// Problem link - https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/description/
class Solution {
public:
    int recur(int i,int  b,vector<int> &prices,vector<vector<int>> &dp){
     int profit = 0;
        
        if(i==prices.size()) return 0;
        if(dp[i][b]!=-1) return dp[i][b];
        if(b){
            profit = max(-prices[i]+recur(i+1,0,prices,dp),0 + recur(i+1,1,prices,dp));
        }else{
             profit = max(prices[i]+recur(i+1,1,prices,dp),0 + recur(i+1,0,prices,dp));
        }
        
        return dp[i][b] =  profit;
    }
    int maxProfit(vector<int>& prices) {
        int b = 1;
        int n = prices.size();
       
        vector<vector<int>> dp(n+1,vector<int>(2,0));
        //return recur(0,b,prices,dp);
        
        dp[n][0]=dp[n][1] =0;
        for(int i=n-1;i>=0;i--){
            for(int j =0;j<=1;j++){
                int profit = 0;
                if(j){
                     profit = max(-prices[i]+dp[i+1][0],0 + dp[i+1][1]);
                }else{
                     profit = max(prices[i]+dp[i+1][1],0 + dp[i+1][0]);
                 }
                 dp[i][j] =  profit;
            }
        }
        return dp[0][1];
         
    }
};
